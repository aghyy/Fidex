generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  firstName      String?
  lastName       String?
  username       String?         @unique
  email          String          @unique
  createdAt      DateTime        @default(now())
  emailVerified  DateTime?
  image          String?
  password       String?
  updatedAt      DateTime        @default(now()) @updatedAt
  accounts       OAuthAccount[]
  sessions       Session[]
  authenticators Authenticator[]
}

model OAuthAccount {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  name                 String?
  createdAt            DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Enums

enum TransactionInterval {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

model Transaction {
  id              String @id @default(cuid())
  userId          String @unique
  originAccountId String
  targetAccountId String
  amount          BigInt
  notes           String
  interval        TransactionInterval @default(ONCE)
  type            TransactionType @default(EXPENSE)
  category        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  expires         DateTime
}

model Category {
  id      String @id @default(cuid())
  userId  String @unique
  name    String @unique
  color   String
  icon    String
}

model Document {
  id          String @id @default(cuid())
  userId      String @unique
  categoryId  String @unique
  name        String @unique
  content     String
}